import React, { useEffect } from 'react';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { AppState, AppStateStatus, Platform } from 'react-native';
import { AppNavigator } from './src/navigation/AppNavigator';
import { ErrorBoundary } from './src/components/ErrorBoundary';
import { colors } from './src/constants/styles';
import { useAppStore } from './src/store/useAppStore';
import * as Location from 'expo-location';
import { analyticsService, AnalyticsEvent } from './src/services/analyticsService';
import { logger } from './src/services/loggingService';
import { initializeServices } from './src/services/init';

// AI Metrics removed - using simple analytics instead
// Test imports disabled for production


function AppContent() {
  const { setUserLocation, setError, setLoading } = useAppStore();

  useEffect(() => {
    // Initialize app services and monitoring
    const initializeApp = async () => {
      logger.info('App initialization started', 'APP_INIT');
      
      try {
        // Initialize all services including Google Sign-In
        await initializeServices();
        
        // Log device info for debugging
        const deviceInfo = { platform: Platform.OS, version: Platform.Version };
        logger.info('App started on device', 'APP_INIT', deviceInfo);
        
        // Track app launch
        analyticsService.trackEvent(AnalyticsEvent.APP_LAUNCHED, {
          platform: deviceInfo.platform,
          version: deviceInfo.appVersion || 'unknown',
        });
        
        // Simple performance monitoring
        logger.info('App performance monitoring started', 'PERF_INIT');
      } catch (error) {
        logger.error('App initialization failed', 'APP_INIT', error as Error);
        setError('App initialization failed');
      }
    };

    initializeApp();

    // App state change monitoring
    const handleAppStateChange = (nextAppState: AppStateStatus) => {
      logger.info(`App state changed to: ${nextAppState}`, 'APP_STATE');
      
      if (nextAppState === 'background') {
        analyticsService.trackEvent(AnalyticsEvent.APP_BACKGROUNDED);
        // App backgrounded - reducing monitoring
      } else if (nextAppState === 'active') {
        analyticsService.trackEvent(AnalyticsEvent.APP_FOREGROUNDED);
        // App active - monitoring resumed
      }
    };

    const appStateSubscription = AppState.addEventListener('change', handleAppStateChange);

    return () => {
      appStateSubscription?.remove();
    };
  }, []);

  useEffect(() => {
    const initializeLocation = async () => {
      try {
        logger.info('Starting location initialization', 'LOCATION');
        setLoading(true);
        
        // Request location permissions with timeout
        const permissionPromise = Location.requestForegroundPermissionsAsync();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Permission request timeout')), 5000)
        );
        
        const { status } = await Promise.race([permissionPromise, timeoutPromise]);
        
        if (status === 'granted') {
          logger.info('Location permission granted', 'LOCATION');
          
          // Get current location with timeout
          const locationPromise = Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.Balanced,
          });
          const locationTimeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Location request timeout')), 10000)
          );
          
          const location = await Promise.race([locationPromise, locationTimeoutPromise]);
          
          const userLocation = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude
          };
          
          setUserLocation(userLocation);
          logger.info('Using current location', 'LOCATION', userLocation);
        } else {
          logger.warn('Location permission denied, using default location', 'LOCATION');
          setUserLocation({ latitude: 43.1599795, longitude: -79.2470299 });
        }
      } catch (error) {
        logger.warn('Location initialization failed, using default location', 'LOCATION');
        setUserLocation({ latitude: 43.1599795, longitude: -79.2470299 });
      } finally {
        setLoading(false);
      }
    };

    initializeLocation();
    
    // Safety timeout to ensure loading state is reset
    const safetyTimeout = setTimeout(() => {
      setLoading(false);
    }, 15000); // 15 seconds timeout
    
    return () => {
      clearTimeout(safetyTimeout);
    };
  }, [setUserLocation, setError, setLoading]);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <SafeAreaProvider>
        <StatusBar style="light" backgroundColor={colors.background} />
        <AppNavigator />
      </SafeAreaProvider>
    </GestureHandlerRootView>
  );
}

export default function App() {
  return (
    <ErrorBoundary>
      <AppContent />
    </ErrorBoundary>
  );
}
